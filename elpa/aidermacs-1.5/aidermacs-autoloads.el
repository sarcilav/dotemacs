;;; aidermacs-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from aidermacs.el

 (autoload 'aidermacs-transient-menu "aidermacs" nil t)
(autoload 'aidermacs-run "aidermacs" "\
Run aidermacs process using the selected backend.
This function sets up the appropriate arguments and launches the process." t)
(autoload 'aidermacs-switch-to-buffer "aidermacs" "\
Switch to the aidermacs buffer.
If BUFFER-NAME is provided, switch to that buffer.
If not, try to get a buffer using `aidermacs-get-buffer-name`.
If that fails, try an existing buffer with `aidermacs-select-buffer-name`.
If the buffer is already visible in a window, switch to that window.
If the current buffer is already the aidermacs buffer, do nothing.

(fn &optional BUFFER-NAME)" t)
(autoload 'aidermacs-write-unit-test "aidermacs" "\
Generate unit test code for current buffer.
Do nothing if current buffer is not visiting a file.
If current buffer filename contains `test':
  - If cursor is inside a test function, implement that test
  - Otherwise show message asking to place cursor inside a test function
Otherwise:
  - If cursor is on a function, generate unit test for that function
  - Otherwise generate unit tests for the entire file" t)
(autoload 'aidermacs-fix-failing-test-under-cursor "aidermacs" "\
Report the current test failure to aidermacs and ask it to fix the code.
This function assumes the cursor is on or inside a test function." t)
(autoload 'aidermacs-implement-todo "aidermacs" "\
Implement TODO comments in current context.
If region is active, implement that specific region.
If cursor is on a comment line, implement that specific comment.
If point is in a function, implement TODOs for that function.
Otherwise implement TODOs for the entire current file." t)
(defvar aidermacs-minor-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "C-c C-n") #'aidermacs-send-line-or-region) (define-key map (kbd "C-<return>") #'aidermacs-send-line-or-region) (define-key map (kbd "C-c C-c") #'aidermacs-send-block-or-region) (define-key map (kbd "C-c C-z") #'aidermacs-switch-to-buffer) map) "\
Keymap for `aidermacs-minor-mode'.")
(autoload 'aidermacs-minor-mode "aidermacs" "\
Minor mode for interacting with aidermacs AI pair programming tool.

Provides these keybindings:
\\{aidermacs-minor-mode-map}

This is a minor mode.  If called interactively, toggle the `aidermacs
minor mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `aidermacs-minor-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'aidermacs-setup-minor-mode "aidermacs" "\
Set up automatic enabling of `aidermacs-minor-mode' for specific files.
This adds a hook to automatically enable the minor mode for files
matching patterns in `aidermacs-auto-mode-files'.
Only adds the hook if it's not already present.

The minor mode provides convenient keybindings for working with
prompt files and other Aider-related files:
\\<aidermacs-minor-mode-map>
\\[aidermacs-send-line-or-region] - Send current line/region line-by-line
\\[aidermacs-send-block-or-region] - Send block/region as whole
\\[aidermacs-switch-to-buffer] - Switch to Aidermacs buffer" t)
(autoload 'aidermacs-switch-to-code-mode "aidermacs" "\
Switch aider to code mode.
In code mode, aider will make changes to your code to satisfy
your requests." t)
(autoload 'aidermacs-switch-to-ask-mode "aidermacs" "\
Switch aider to ask mode.
In ask mode, aider will answer questions about your code, but
never edit it." t)
(autoload 'aidermacs-switch-to-architect-mode "aidermacs" "\
Switch aider to architect mode.
In architect mode, aider will first propose a solution, then ask
if you want it to turn that proposal into edits to your files." t)
(autoload 'aidermacs-switch-to-help-mode "aidermacs" "\
Switch aider to help mode.
In help mode, aider will answer questions about using aider,
configuring, troubleshooting, etc." t)
(register-definition-prefixes "aidermacs" '("aidermacs-"))


;;; Generated autoloads from aidermacs-backend-comint.el

(register-definition-prefixes "aidermacs-backend-comint" '("aidermacs-"))


;;; Generated autoloads from aidermacs-backend-vterm.el

(register-definition-prefixes "aidermacs-backend-vterm" '("aidermacs-"))


;;; Generated autoloads from aidermacs-backends.el

(register-definition-prefixes "aidermacs-backends" '("aidermacs-"))


;;; Generated autoloads from aidermacs-models.el

(register-definition-prefixes "aidermacs-models" '("aidermacs-"))


;;; Generated autoloads from aidermacs-output.el

(register-definition-prefixes "aidermacs-output" '("aidermacs-"))

;;; End of scraped data

(provide 'aidermacs-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; aidermacs-autoloads.el ends here
